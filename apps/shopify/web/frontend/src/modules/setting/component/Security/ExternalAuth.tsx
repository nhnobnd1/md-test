import { useJob, useMount } from "@moose-desk/core";
import { UserSettingRepository } from "@moose-desk/repo";
import {
  Button,
  FormLayout,
  InlineError,
  Layout,
  Stack,
  Text,
  TextField,
} from "@shopify/polaris";
import { memo, useCallback, useEffect, useState } from "react";
import { catchError, map, of } from "rxjs";
import Form from "src/components/Form";
import FormItem from "src/components/Form/Item";
interface ExternalAuth {
  initialValues?: {
    twoFactorEnabled: boolean;
    twoFactorMethod: string;
  };
  props: {
    method: string;
    key: string;
  };
  back: (value: any) => void;
  handleCloseModal: () => void;
  fetch2FAStatus: () => void;
  show: (data: string, props?: any) => void;
  setBanner: (data: any) => void;
}
const ExternalAuth = ({
  initialValues,
  props,
  back,
  handleCloseModal,
  fetch2FAStatus,
  show,
  setBanner,
}: ExternalAuth) => {
  const [error, setError] = useState(false);
  const handleSubmit = useCallback(
    (data: any) => {
      submit({ method: initialValues?.twoFactorMethod, ...data });
    },
    [initialValues]
  );
  const { run: submit } = useJob((dataSubmit: any) => {
    return UserSettingRepository()
      .verifySetupOTP(dataSubmit)
      .pipe(
        map(({ data }) => {
          if (data.statusCode === 200) {
            handleCloseModal();
            fetch2FAStatus();
            setError(false);
            back(1);
            setBanner({
              isShowBanner: true,
              message:
                "Your Two-Factor Authentication has been enabled successfully.",
              status: "success",
            });
            show(
              "Your Two-Factor Authentication has been enabled successfully."
            );
          } else {
            setError(true);
          }
        }),
        catchError((error) => {
          setError(true);
          return of(error);
        })
      );
  });
  useEffect(() => {}, [initialValues]);
  useMount(() => setError(false));
  return (
    <Form initialValues={{ code: "" }} onSubmit={handleSubmit}>
      <Layout sectioned>
        <Layout.Section>
          <div className="main-content">
            <FormLayout>
              <Stack vertical>
                <Text variant="bodyMd" as="p">
                  1. Download and install any authenticator application in your
                  mobile device (Google Authenticator, 2FAs, Duo Mobile,...etc)
                </Text>
                <div>
                  <Text variant="bodyMd" as="span">
                    2. Open your authenticator and scan this QR code.
                  </Text>
                  <div className="p-4">
                    <img
                      width={220}
                      height={220}
                      src={`data:image/png;base64,${props.key}`}
                    />
                  </div>
                </div>
                <div>
                  <Text variant="bodyMd" as="span">
                    3. Enter the OTP generated by the authenticator application.
                  </Text>
                  <div className="flex items-center">
                    <div className="w-24 m-4">
                      <FormItem name="code">
                        <TextField
                          type="text"
                          label="OTP code"
                          labelHidden
                          autoComplete="off"
                          maxLength={6}
                        />
                      </FormItem>
                    </div>
                    {error ? (
                      <div className="Polaris-Labelled__Error">
                        <InlineError
                          message="Wrong code. Try again."
                          fieldID="myFieldID"
                        />
                      </div>
                    ) : null}
                  </div>
                </div>
              </Stack>
            </FormLayout>
          </div>
        </Layout.Section>
        <Layout.Section fullWidth>
          <Stack distribution="trailing">
            <Button onClick={() => back(1)}>Cancle</Button>
            <Button submit primary>
              Confirm
            </Button>
          </Stack>
        </Layout.Section>
      </Layout>
    </Form>
  );
};
export default memo(ExternalAuth);
